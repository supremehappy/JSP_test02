package crud;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import model.BBSItem;
import model.ProItem;
import model.UserInfo;

public class CrudHome {
// 환경설정 파일을 이용하여 매퍼를 처리하는 객체
// 매퍼에 있는 쿼리 실행
	
	private final String namespace="myHomeMapper";

	public List<ProItem> selectProPrevPage(int pid){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectProPrevPage";
			List<ProItem> list = sqlSession.selectList(sql,pid);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public List<ProItem> selectProNextPage(int pid){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectProNextPage";
			List<ProItem> list = sqlSession.selectList(sql,pid);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public Integer selectProPage(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectProPage";
			Integer num = sqlSession.selectOne(sql);
			return num;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public ProItem selectProItem(Integer pid){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectProItem";
			ProItem item = sqlSession.selectOne(sql, pid);
			return item;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public List<ProItem> selectPro(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectPro";
			List<ProItem> list=sqlSession.selectList(sql);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	//bbs 게시판
	public Integer selectNextCount(int seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectNextCount";
			int result = sqlSession.selectOne(sql,seqno);
			return result;
			
		}finally{
			sqlSession.close();
		}
	}
	
	// bbs 게시판 
	public List<BBSItem> selectBBSPage(int seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectBBSPage";
			List<BBSItem> list = sqlSession.selectList(sql,seqno);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public Integer selectPrevCount(int seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectPrevCount";
			int result = sqlSession.selectOne(sql,seqno);
			return result;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public List<BBSItem> selectPrevPage(int seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectPrevPage";
			List<BBSItem> list = sqlSession.selectList(sql,seqno);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public List<BBSItem> selectNextPage(int seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectNextPage";
			List<BBSItem> list = sqlSession.selectList(sql,seqno);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public Integer selectPage(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectPage";
			Integer num = sqlSession.selectOne(sql);
			return num;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public BBSItem selectBBSItem(Integer seqno){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectBBSItem";
			BBSItem item = sqlSession.selectOne(sql, seqno);
			return item;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public List<BBSItem> selectBBS(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectBBS";
			List<BBSItem> list=sqlSession.selectList(sql);
			return list;
			
		}finally{
			sqlSession.close();
		}
	}
	
	//product 게시판
	public Integer selectMaxPid(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectMaxPid";
			Object result=sqlSession.selectOne(sql);
			
			if(result == null) return 0;
			
			else{
				int num = Integer.parseInt(String.valueOf(result));
				return num;
			}
		}finally{
			sqlSession.close();
		}
	}
	
	public Integer insertPro(ProItem pro){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql = namespace+".insetPro";
			int result = sqlSession.insert(sql, pro);
			
			if(result >0) sqlSession.commit();
			else sqlSession.rollback();
			return result;
			
		}finally{
			sqlSession.close();
		}
	}
	
	// bbs 게시판
	public Integer selectMaxSeqno(){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql=namespace+".selectMaxSeqno";
			Object result=sqlSession.selectOne(sql);
			
			if(result == null) return 0;
			else{
				int num = Integer.parseInt(String.valueOf(result));
				return num;
			}
		}finally{
			sqlSession.close();
		}
	}
	
	public Integer insertBBS(BBSItem bbs){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			String sql = namespace+".insetBBS";
			int result = sqlSession.insert(sql, bbs);
			
			if(result >0) sqlSession.commit();
			else sqlSession.rollback();
			return result;
			
		}finally{
			sqlSession.close();
		}
	}
	
	public UserInfo selectMember(String id){
		SqlSession sqlSession = getConnection().openSession();
		
		try{
			
			//매퍼 네임스페이스.셀렉트 아이디
			String sql=namespace+".selectMember";
			//select 건수가 하나일때 selectOne 메소드 사용 / 다수일때 selectList 메소드 사용
			UserInfo info = sqlSession.selectOne(sql,id);
			
			return info;
			
		}finally{
			sqlSession.close();
		}
	}
	
	//매퍼 처리하는 객체 생성 메소드
	private SqlSessionFactory getConnection(){
		String resource="MyBatisConfig.xml";
		InputStream inputStream=null;
		
		try{
			inputStream=Resources.getResourceAsStream(resource);
		}catch(IOException e){
			e.printStackTrace();
		}
		
		SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
		
		return builder.build(inputStream);
	}

	
}
